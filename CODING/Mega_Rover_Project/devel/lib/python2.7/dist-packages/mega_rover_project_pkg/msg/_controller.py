# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mega_rover_project_pkg/controller.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class controller(genpy.Message):
  _md5sum = "23a2b0ddfb78ba3b65d96a5b10f39992"
  _type = "mega_rover_project_pkg/controller"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 swim
int32 fly
int32 shoot
float64 L3X
float64 L3Y
float64 R3X
float64 R3Y"""
  __slots__ = ['swim','fly','shoot','L3X','L3Y','R3X','R3Y']
  _slot_types = ['int32','int32','int32','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       swim,fly,shoot,L3X,L3Y,R3X,R3Y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(controller, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.swim is None:
        self.swim = 0
      if self.fly is None:
        self.fly = 0
      if self.shoot is None:
        self.shoot = 0
      if self.L3X is None:
        self.L3X = 0.
      if self.L3Y is None:
        self.L3Y = 0.
      if self.R3X is None:
        self.R3X = 0.
      if self.R3Y is None:
        self.R3Y = 0.
    else:
      self.swim = 0
      self.fly = 0
      self.shoot = 0
      self.L3X = 0.
      self.L3Y = 0.
      self.R3X = 0.
      self.R3Y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3i4d().pack(_x.swim, _x.fly, _x.shoot, _x.L3X, _x.L3Y, _x.R3X, _x.R3Y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.swim, _x.fly, _x.shoot, _x.L3X, _x.L3Y, _x.R3X, _x.R3Y,) = _get_struct_3i4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3i4d().pack(_x.swim, _x.fly, _x.shoot, _x.L3X, _x.L3Y, _x.R3X, _x.R3Y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.swim, _x.fly, _x.shoot, _x.L3X, _x.L3Y, _x.R3X, _x.R3Y,) = _get_struct_3i4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i4d = None
def _get_struct_3i4d():
    global _struct_3i4d
    if _struct_3i4d is None:
        _struct_3i4d = struct.Struct("<3i4d")
    return _struct_3i4d
