// Generated by gencpp from file mega_rover_project_pkg/controller.msg
// DO NOT EDIT!


#ifndef MEGA_ROVER_PROJECT_PKG_MESSAGE_CONTROLLER_H
#define MEGA_ROVER_PROJECT_PKG_MESSAGE_CONTROLLER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mega_rover_project_pkg
{
template <class ContainerAllocator>
struct controller_
{
  typedef controller_<ContainerAllocator> Type;

  controller_()
    : swim(0)
    , fly(0)
    , shoot(0)
    , L3X(0.0)
    , L3Y(0.0)
    , R3X(0.0)
    , R3Y(0.0)  {
    }
  controller_(const ContainerAllocator& _alloc)
    : swim(0)
    , fly(0)
    , shoot(0)
    , L3X(0.0)
    , L3Y(0.0)
    , R3X(0.0)
    , R3Y(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _swim_type;
  _swim_type swim;

   typedef int32_t _fly_type;
  _fly_type fly;

   typedef int32_t _shoot_type;
  _shoot_type shoot;

   typedef double _L3X_type;
  _L3X_type L3X;

   typedef double _L3Y_type;
  _L3Y_type L3Y;

   typedef double _R3X_type;
  _R3X_type R3X;

   typedef double _R3Y_type;
  _R3Y_type R3Y;





  typedef boost::shared_ptr< ::mega_rover_project_pkg::controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mega_rover_project_pkg::controller_<ContainerAllocator> const> ConstPtr;

}; // struct controller_

typedef ::mega_rover_project_pkg::controller_<std::allocator<void> > controller;

typedef boost::shared_ptr< ::mega_rover_project_pkg::controller > controllerPtr;
typedef boost::shared_ptr< ::mega_rover_project_pkg::controller const> controllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mega_rover_project_pkg::controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mega_rover_project_pkg::controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mega_rover_project_pkg::controller_<ContainerAllocator1> & lhs, const ::mega_rover_project_pkg::controller_<ContainerAllocator2> & rhs)
{
  return lhs.swim == rhs.swim &&
    lhs.fly == rhs.fly &&
    lhs.shoot == rhs.shoot &&
    lhs.L3X == rhs.L3X &&
    lhs.L3Y == rhs.L3Y &&
    lhs.R3X == rhs.R3X &&
    lhs.R3Y == rhs.R3Y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mega_rover_project_pkg::controller_<ContainerAllocator1> & lhs, const ::mega_rover_project_pkg::controller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mega_rover_project_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mega_rover_project_pkg::controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mega_rover_project_pkg::controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mega_rover_project_pkg::controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mega_rover_project_pkg::controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mega_rover_project_pkg::controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mega_rover_project_pkg::controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mega_rover_project_pkg::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23a2b0ddfb78ba3b65d96a5b10f39992";
  }

  static const char* value(const ::mega_rover_project_pkg::controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23a2b0ddfb78ba3bULL;
  static const uint64_t static_value2 = 0x65d96a5b10f39992ULL;
};

template<class ContainerAllocator>
struct DataType< ::mega_rover_project_pkg::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mega_rover_project_pkg/controller";
  }

  static const char* value(const ::mega_rover_project_pkg::controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mega_rover_project_pkg::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 swim\n"
"int32 fly\n"
"int32 shoot\n"
"float64 L3X\n"
"float64 L3Y\n"
"float64 R3X\n"
"float64 R3Y\n"
;
  }

  static const char* value(const ::mega_rover_project_pkg::controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mega_rover_project_pkg::controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swim);
      stream.next(m.fly);
      stream.next(m.shoot);
      stream.next(m.L3X);
      stream.next(m.L3Y);
      stream.next(m.R3X);
      stream.next(m.R3Y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mega_rover_project_pkg::controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mega_rover_project_pkg::controller_<ContainerAllocator>& v)
  {
    s << indent << "swim: ";
    Printer<int32_t>::stream(s, indent + "  ", v.swim);
    s << indent << "fly: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fly);
    s << indent << "shoot: ";
    Printer<int32_t>::stream(s, indent + "  ", v.shoot);
    s << indent << "L3X: ";
    Printer<double>::stream(s, indent + "  ", v.L3X);
    s << indent << "L3Y: ";
    Printer<double>::stream(s, indent + "  ", v.L3Y);
    s << indent << "R3X: ";
    Printer<double>::stream(s, indent + "  ", v.R3X);
    s << indent << "R3Y: ";
    Printer<double>::stream(s, indent + "  ", v.R3Y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MEGA_ROVER_PROJECT_PKG_MESSAGE_CONTROLLER_H
